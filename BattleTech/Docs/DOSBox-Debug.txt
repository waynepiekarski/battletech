Use dosbox-debug

Keys:
ALT + FN + P (Alt+Pause on Framework laptop keyboard) - break debugger at current location
F10 - step over
F11 - step into
F5 - run
Control + F5 - capture screenshot to ~/.dosbox
Alt + Enter - fullscreen mode

BPM A000:013F - breakpoint at memory location for pixel (319,0) top right pixel of screen

CTRL+F11 - slow down CPU
Slow down the CPU and then move the character left, you will see the refresh happen
ALT+FN+P to break during the refresh

CPU will be at 1A21:2559 which is a "repe movsb" instruction. Each of these
instructions refreshes one scanline.

EAX=0000000D  ESI=00001255  DS=AC00   ES=A000   FS=0000   GS=0000   SS=387D Real
EBX=0000001B  EDI=00001255  CS=1A21   EIP=00002559  C0 Z0 S0 O0 A0 P1 D0 I1 T0
ECX=0000001B  EBP=00005F64                                          IOPL3  CPL0
EDX=00000053  ESP=00005F58                                  55751845

"movs copies data from ds:esi to es:edi and increments or decrements the pointers"
F3 A4	REP MOVS m8, m8	ZO	Valid	Valid	Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI].
CX is the counter, which in this case is 0x1B or 27d, not sure why 27?

MEMDUMPBIN 0:0 FFFFFF - save out 1M of memory

Gimp can load *.data files with a raw image loader that you can specify width x height

BattleTech needs to be run in MCGA mode to use a proper linear framebuffer. If you use
EGA/VGA mode then it uses a weird planar mode where the framebuffer is not easy to decode.


Previous offsets: 0x1E3B0 and 0x1E3B2

MEMDUMPBIN 0:0 100000 twice after moving the character 3 to the right and 3 down.
./hexdiff top-left-3.bin bottom-right-3.bin --no-graphics | grep "diffdec=[+-]3$" | less
Character position seems to change +1 to the east and +1 to the south, -1,-1 to the north-west
ofs=0x1E3AF lastofs=0x91    src=0x56 dst=0x59 diffdec=+3
ofs=0x1E3B1 lastofs=0x2     src=0x12 dst=0x15 diffdec=+3

Write to fs4-dosbox stdin with:
W <hexOFS> <hexVAL>
R <hexOFS>

However, adjusting these values has no impact. The character stays in the same position. If you
do a read the value has gone back to the original. So the value is being copied over from somewhere
else after the movement has been processed.

Also found these in the diff output: (we know the grep should only look for +3 to reduce the search)
./hexdiff top-left-3.bin bottom-right-3.bin --no-graphics | grep "diffdec=+3$" | less
ofs=0x2852B lastofs=0x302   src=0x56 dst=0x59 diffdec=+3 (Works)
ofs=0x2852D lastofs=0x2     src=0x12 dst=0x15 diffdec=+3 (Works)
ofs=0x2E34C lastofs=0x68C   src=0x56 dst=0x59 diffdec=+3 (Does nothing)
ofs=0x2E37E lastofs=0x11    src=0x12 dst=0x15 diffdec=+3 (Does nothing)

These offsets work to move the character around!
W 2852A 0 no effect
W 2852B 0 <-- moves in X (0x00 to 0x7F only, never 0x80-0xFF)
W 2852C 0 <-- read-only X tile coordinate, only high 4-bits set, writing has no effect
W 2852D 0 <-- moves in Y (0x00 to 0x7F only, never 0x80-0xFF)
W 2852E 0 <-- read-only Y tile coordinate, only high 4-bits set, writing has no effect
Seems to corrupt the movements and after looking at the map they are no longer in the Citadel.
Also, it seems like the XY coordinates are only 8-bit values and not 16-bit like I thought.
Perhaps these are XY coordinates within a larger grid and values stored elsewhere. When you
move into a new grid square then some different map might be loaded, so might not be straightforward
to push the character around with just these memory locations.




ofs=0x1E3AF lastofs=0x91    src=0x56 dst=0x59 diffdec=+3   no movement when changed
ofs=0x1E3B1 lastofs=0x2     src=0x12 dst=0x15 diffdec=+3   no movement when changed
ofs=0x20605 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2061D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x206F4 lastofs=0x1     src=0x05 dst=0x08 diffdec=+3
ofs=0x20885 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2089D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x20BD8 lastofs=0x1     src=0x05 dst=0x08 diffdec=+3
ofs=0x20E78 lastofs=0x1     src=0x55 dst=0x58 diffdec=+3
ofs=0x21005 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2101D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x21285 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2129D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x21421 lastofs=0x1     src=0x05 dst=0x08 diffdec=+3
ofs=0x21A1D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x21C9D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x222F7 lastofs=0x1     src=0x87 dst=0x8A diffdec=+3
ofs=0x2241D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2269D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x22E1D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2309D lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2358F lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x23591 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x2380F lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x23811 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x23A93 lastofs=0x1     src=0xB8 dst=0xBB diffdec=+3
ofs=0x23B80 lastofs=0x1     src=0x00 dst=0x03 diffdec=+3
ofs=0x23B86 lastofs=0x1     src=0x00 dst=0x03 diffdec=+3
ofs=0x27B8D lastofs=0x1     src=0x95 dst=0x98 diffdec=+3
ofs=0x2852B lastofs=0x302   src=0x56 dst=0x59 diffdec=+3   moves
ofs=0x2852D lastofs=0x2     src=0x12 dst=0x15 diffdec=+3   moves
ofs=0x2E34C lastofs=0x68C   src=0x56 dst=0x59 diffdec=+3   does not work
ofs=0x2E37E lastofs=0x11    src=0x12 dst=0x15 diffdec=+3   does not work
ofs=0x31569 lastofs=0x1     src=0xFC dst=0xFF diffdec=+3
ofs=0x3163E lastofs=0x1     src=0xCC dst=0xCF diffdec=+3
ofs=0x3E716 lastofs=0x11    src=0x03 dst=0x06 diffdec=+3
ofs=0x3E730 lastofs=0x10    src=0x57 dst=0x5A diffdec=+3

---

After upgrading Kubuntu to use Wayland compositor, I had problems with dosbox ignoring arrow keys.
Need to edit all ~/.dosbox/ config files to use:
usescancodes=false
And not =true like the default. For some reason this fixes everything with Wayland.

---

Using the LOGL output I found some interesting addresses that handled the map
refresh.
BP 1A21:1237
OR instructions: 80 CB 08 --> replace with 80 CB 02
This screws up the map tiles.
Noticed that this code was reading from 1E0E:0589 et al, so multiply by 16 to
get linear address 1E0E0 and start fuzzing from there.

Using fs4-dosbox:
W 1EC00 FF 10
Screws up a thick strip of tiles in the top row of the map.
Each value 0xFF can be replaced with other values to get different tiles.
The world map seems to have very large tiles that map to some other encoding
of sub-tiles.

W 1EC00 AA 2
Seems to mess up half a map screen worth of tiles with just 2 bytes.

So they are using an encoding mechanism that has a high-level map with tiles,
and each of these maps to a group of sub-tiles that is quite large.

---

When decoding the MTP files, I generated maps with values 0x00..0xFF in them.
I noticed that all values 0d-84d were walk-throughable, but >=85d would block
the character. 84d is 0x54 or 1010100b, but no obvious pattern here.
