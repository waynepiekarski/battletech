
Trying to disable the check that occurs when the character tries to walk in water that is too deep:

This string is printed when you try to walk to deep, linear address 0x38BE0
00038be0  54 68 65 20 77 61 74 65  72 20 69 73 20 74 6f 6f  |The water is too|

Reko disassembled:
3EDB:0410 54 68 65 20 77 61 74 65 72 20 69 73 20 74 6F 6F The water is too


1A21:0B5C seems to be waiting for VGA VSYNC with IN and AL=1E09, DX=03DA

Doing BPINT 16 breaks on INT 16 which can be used to read the keyboard AH=01

1A21:0B90  B80E1E              mov  ax,1E0E
1A21:0B93  8ED8                mov  ds,ax
1A21:0B95  32E4                xor  ah,ah
1A21:0B97  CD16                int  16
1A21:0B99  3C00                cmp  al,00
1A21:0B9B  7504                jne  00000BA1 ($+4)         (no jmp)
1A21:0B9D  8AC4                mov  al,ah          (AL=AH)
1A21:0B9F  F6D8                neg  al
1A21:0BA1  98                  cbw                 (if AL!=00)
1A21:0BA2  1F                  pop  ds

Compile dosbox with -g so we can catch memory access here:
awatch *(wayne_memory+0x38BE0)     <-- location of "The water is too"
print Segs.val[1]    <-- CS register (decimal)
print cpu_regs.ip    <-- IP register (decimal)
Convert to hex and get 17F8:075B which seems to read this string

BP 17F8:075B       <-- will put a breakpoint at this address


-- Trace from keyboard interrupt to reading the text "The water is too"
BPINT 16           <-- Keyboard interrupt
BP 17F8:075B       <-- "The water is too"
F5                 <-- resume execution
<trigger right arrow to activate the interrupt>
<When at the breakpoint for the keyboard>
LOGL 10000         <-- Save LOGCPU.TXT from this point onwards
F5 to continue to the "The water is too" string read.
Copy the LOGCPU.TXT file since it has all the instructions and analyze it.

https://stanislavs.org/helppc/int_21-b.html
Check Standard Input Status
AH=0B, on return AL=00 no char or AH=FF if char available
1A21:00003BE5  mov  ah,0B
1A21:00003BE7  int  21
The interrupt sets CX=0140h and spins in a loop until CX is 0.

CALL instruction is like a subroutine, pushes return address onto the stack until RET returns.


F000:0000E98D  int  15                                                 CD 15                 EAX:00004FE0
F000:000011E0  callback 000F  (Int 15 Bios)                            FE 38 0F 00           EAX:00004FE0
F000:000011E4  iret                                                    CF                    EAX:00004FE0 CF:1
F000:0000E98F  jnc  0000E995 ($+4)             (no jmp)                73 04
https://stanislavs.org/helppc/int_15-4f.html
CF is set, so new scan code available.

F000:0000E991  callback 0011  (IRQ 1 Keyboard
F000:0000E995  cli
F000:0000E996  mov  al,20
F000:0000E998  out  20,al
F000:0000E99A  pop  ax
F000:0000E99B  iret
https://wiki.osdev.org/PIC
I/O port 0x20 is the programmable interrupt controller.


I pressed the right arrow here which is scancode 4Dh. Can see the 4D in register AL.
https://en.wikipedia.org/wiki/INT_16H
AL=10h "Read expanded keyboard character"
https://www.plantation-productions.com/Webster/www.artofasm.com/DOS/ch20/CH20-3.html
AL=scan code returned back
1A21:00000B97  int  16                                                 CD 16                 EAX:0000000E
F000:00001200  sti                                                     FB                    EAX:0000000E
F000:00001201  callback 0010  (Keyboard)                               FE 38 10 00           EAX:0000000E
F000:00001205  iret                                                    CF                    EAX:00004D00
1A21:00000B99  cmp  al,00                                              3C 00                 EAX:00004D00
1A21:00000B9B  jne  00000BA1 ($+4)             (no jmp)                75 04                 EAX:00004D00
1A21:00000B9D  mov  al,ah                                              8A C4                 EAX:00004D00
1A21:00000B9F  neg  al                                                 F6 D8                 EAX:00004D4D
1A21:00000BA1  cbw                                                     98                    EAX:00004DB3
1A21:00000BA2  pop  ds                                                 1F                    EAX:0000FFB3
1A21:00000BA3  pop  si                                                 5E                    EAX:0000FFB3
1A21:00000BA4  pop  di                                                 5F                    EAX:0000FFB3
1A21:00000BA5  pop  bp                                                 5D                    EAX:0000FFB3
1A21:00000BA6  retf                                                    CB                    EAX:0000FFB3

NEG does twos complement negation of AL.
CBW converts byte into a word.
Transformation of scancode 4Dh into AX=FFB3, which then returns back to 18DF:00000275 for processing.
18DF:00000275  mov  [bp-04],ax                 ss:[5F74]=0264
The value FFB3 read in is stored onto the stack address for use later on.
Then returned again back to:
01A2:00000048  mov  [bp-1C],ax                 ss:[5F92]=FFB3          89 46 E4
Stored the value at 387D:5F92 as well.

xor ax,ax is just a quick way of setting ax=0.

You can see where the value FFB3 is now read from the stack, and there are CMP that compares it against various
values which are probably up, down, left, right. This is probably where the directions are handled!
17F8:00000D27  mov  ax,[bp+06]                 ss:[5F7C]=FFB3
17F8:00000D2A  cmp  ax,0041                                  
17F8:00000D2D  je   00000D69 ($+3a)            (no jmp)      
17F8:00000D2F  jle  00000D34 ($+3)             (down)        
17F8:00000D34  cmp  ax,FFB9                                  
17F8:00000D37  je   00000D79 ($+40)            (no jmp)      
17F8:00000D39  jg   00000DA8 ($+6d)            (no jmp)      
17F8:00000D3B  cmp  ax,FFB1                                  
17F8:00000D3E  je   00000D51 ($+11)            (no jmp)      
17F8:00000D40  jg   00000D91 ($+4f)            (down)        
17F8:00000D91  cmp  ax,FFB3                                  
17F8:00000D94  je   00000D71 ($-25)            (up)          
17F8:00000D71  mov  word [bp+06],FFB3          ss:[5F7C]=FFB3
17F8:00000D76  jmp  00000E71 ($+f8)            (down)        
17F8:00000E71  mov  ax,[bp+06]                 ss:[5F7C]=FFB3
17F8:00000E74  pop  bp                                       
17F8:00000E75  retf                                          



Set breakpoint where the value FFB3 is being checked:
BP 17F8:0D27
There are a bunch of CMP statements with various 0xFF?? and 0x00?? codes.
The 0x00?? are ASCII chars. Example 0x57 is W, and the game supports WASD controls.
The game supports diagonal movements too so 0xFFB9,B1,0C,AF,B0,B3,B5,B7,BB, etc are arrows.

01A2:000021D0  cmp  word [bp+06],FFB3          ss:[5F7C]=FFB3
sets [bp-02] to 0001h due to FFB3.
Other code paths nearby set [bp-02] to FFFF which is clearly -1:
01A2:21F9  C746FEFFFF          mov  word [bp-02],FFFF

01A2:00001C1F looks interesting. It has a bunch of tests with cmp word to various values and constants.
01A2:00001C99  cmp  byte es:[bx+07A4],0F       es:[07A9]=1E0F
Testing a specific byte offset relative to BX=0005 against 0x0F.

This breakpoint seems to only trigger when we touch the water:
call 1675:17C6
BP 1675:17C6

The decision was made here against 0x0F, so lets edit this out:
01A2:00001C99  cmp  byte es:[bx+07A4],0F       es:[07A9]=1E0F          26 80 BF A4 07 0F
Replace 0x0F with 0x99 in VSCode hex editor, and now the water test is disabled!!!

01A2:1C99  2680BFA4070F        cmp  byte es:[bx+07A4],0F   es:[07A9]=1E0F      
01A2:1C9F  7520                jne  00001CC1 ($+20)        (no jmp)

Need to replace JNE=75 with JMP (jump always) to avoid the water better.
Otherwise I was seeing blue buildings with probably hex code 0x99 triggering the water test.

01A2:1C99  2680BFA4070F        cmp  byte es:[bx+07A4],0F   es:[07A5]=0F0E      
01A2:1C9F  EB20                jmp  short 00001CC1 ($+20)  (down)

Replace 2680BFA407997520 (patched already) or 2680BFA4070F7520 (BTECH.EXE) with 2680BFA4070FEB20

This is a good place to do a breakpoint for looking for others now like wall blocking:
BP 01A2:00001C1F

01A2:1D63  F646F801            test byte [bp-08],01        ss:[5F5C]=001A
01A2:1D6D  26F6064BA401        test byte es:[A44B],01      es:[A44B]=5B88
01A2:1D78  F646F601            test byte [bp-0A],01        ss:[5F5A]=000B
01A2:1D82  26F6064DA401        test byte es:[A44D],01      es:[A44D]=9000

Doing a search and replace for 26F6064DA401 with either 00 or FF at the end seems to cause
issues with the collision map being moved to the right one square.
Also replacing F646F801 with F646F8AA also caused similar problems.
Both of these changes cause the too deep message when hitting a blue building, must have
a similar bit pattern.

The breakpoint 01A2:00001C1F seems to only fire on a second movement, not sure
what is going on here.

Produced a diff of the instructions after 01A2:00001C1F with trying to move up into the building,
and then trying to move up into a grassy area. The one on the right shows a successful movement up,
with the INC WORD [BP-0C] being executed and this could be where the movement offset is applied?

01A2:00001D73  je   00001D78 ($+3)             (down)         | 01A2:00001D73  je   00001D78 ($+3)             (no jmp)      
01A2:00001D78  test byte [bp-0A],01            ss:[5F58]=000B | 01A2:00001D75  inc  word [bp-0C]               ss:[5F56]=007E
                                                              > 01A2:00001D78  test byte [bp-0A],01            ss:[5F58]=000B
01A2:00001D7C  je   00001D8E ($+10)            (no jmp)         01A2:00001D7C  je   00001D8E ($+10)            (no jmp)

01A2:1D6D  26F6064BA401        test byte es:[A44B],01      es:[A44B]=097C
01A2:1D73  7403                je   00001D78 ($+3)         (down)

Can replace the 7403h with NOP instructions 9090h.
Replace 26F6064BA4017403 with 26F6064BA4019090 makes 9 changes to the BTECH.EXE file.
This didn't seem to change anything. And after testing again, I found that the INC is not relevant
here and seems to do a collision test every second run through the breakpoint. So this is not what
we are looking for.

Replace some of these tests which causes the character to be able to walk up into a building, but
other directions are not working either.
SM 01A2:1D73 90 90
SM 01A2:1D88 90 90


I have finally worked it out. I calculated a diff LOGCPU-UpBlocked-UpMoved.diff
and observed the following before a large change in the code path:
01A2:00001E72  cmp  [bp-10],ax                       39 46 F0
01A2:00001E75  jge  00001E7A ($+3)                   7D 03

Replacing the JGE with NOP allows me to walk through all buildings and walls!
Two instances of replacing 3946F07D03 with 3946F09090
